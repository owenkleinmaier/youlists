// src/components/PlaylistPage.tsx

import React, { useState, useEffect, useMemo } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { ArrowLeft, Save, Share2, ExternalLink, Sun, Moon } from "lucide-react";
import { usePlaylistContext, Song } from "../context/PlaylistContext";
import { usePlaylistHistory } from "../actions/usePlaylistHistory";
import { useSpotify } from "../actions/useSpotify";
import { useTheme } from "../context/ThemeContext";
import { ProcessedImage } from "../utils/imageUtils";

interface EnhancedSong extends Song {
  coverUrl?: string;
  previewUrl?: string;
  popularity?: number;
}

import UniversalExport from "./UniversalExport";

const PlaylistPage: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { theme, toggleTheme } = useTheme();
  const { playlistName, currentPlaylist } = usePlaylistContext();
  const { savePlaylist } = usePlaylistHistory();
  const token = localStorage.getItem("spotify_token");
  const isGuestMode = localStorage.getItem("guest_mode") === "true";
  const { searchTrackURI, getTrackDetails, createSpotifyPlaylist } =
    useSpotify(token);

  const playlist = useMemo(() => {
    const playlistData = location.state?.playlistData || {
      playlist: currentPlaylist,
    };
    return Array.isArray(playlistData?.playlist) ? playlistData.playlist : [];
  }, [location.state, currentPlaylist]);

  const coverImage = useMemo(() => {
    return location.state?.coverImage as ProcessedImage | null;
  }, [location.state]);

  const [isExporting, setIsExporting] = useState(false);
  const [exportProgress, setExportProgress] = useState(0);
  const [exportedPlaylistURL, setExportedPlaylistURL] = useState<string | null>(
    null
  );
  const [savedToHistory, setSavedToHistory] = useState(false);
  const [customPlaylistName, setCustomPlaylistName] = useState(
    playlistName || "ai-generated playlist"
  );
  const [enhancedPlaylist, setEnhancedPlaylist] = useState<EnhancedSong[]>([]);
  const [isEnhancing, setIsEnhancing] = useState(false);

  useEffect(() => {
    const loadAlbumCovers = async () => {
      if (playlist.length > 0 && token && !isGuestMode) {
        setIsEnhancing(true);
        try {
          const enhanced = await Promise.all(
            playlist.map(async (song: Song) => {
              try {
                const uri = await searchTrackURI(song.title, song.artist);
                if (uri) {
                  const details = await getTrackDetails(uri);
                  return {
                    ...song,
                    uri,
                    coverUrl: details?.album.images[0]?.url,
                    previewUrl: details?.preview_url,
                    popularity: details?.popularity,
                  };
                }
                return { ...song };
              } catch (e) {
                return { ...song };
              }
            })
          );
          setEnhancedPlaylist(enhanced);
        } catch (error) {
          console.error("Error enhancing playlist:", error);
          setEnhancedPlaylist(playlist.map((song: Song) => ({ ...song })));
        } finally {
          setIsEnhancing(false);
        }
      } else {
        setEnhancedPlaylist(playlist.map((song: Song) => ({ ...song })));
      }
    };

    loadAlbumCovers();
  }, [playlist, token, searchTrackURI, getTrackDetails]);

  const handleExportToSpotify = async () => {
    if (!enhancedPlaylist.length) {
      alert("No songs to export!");
      return;
    }

    setIsExporting(true);
    setExportProgress(0);

    try {
      const trackURIs: string[] = [];

      for (let i = 0; i < enhancedPlaylist.length; i++) {
        const song = enhancedPlaylist[i];

        if (song.uri) {
          trackURIs.push(song.uri);
        }

        setExportProgress(
          Math.round(((i + 1) / enhancedPlaylist.length) * 100)
        );
      }

      if (trackURIs.length === 0) {
        alert("No Spotify tracks found to export!");
        return;
      }

      // Create playlist with cover image
      const description = coverImage
        ? "Generated by YouLists AI from your image"
        : "Generated by YouLists AI";

      const playlistLink = await createSpotifyPlaylist(
        customPlaylistName,
        trackURIs,
        description,
        coverImage
      );

      setExportedPlaylistURL(playlistLink);
    } catch (error) {
      console.error("Error exporting to Spotify:", error);
      alert("Failed to export playlist to Spotify. Please try again.");
    } finally {
      setIsExporting(false);
    }
  };

  const handleSaveToHistory = () => {
    savePlaylist(customPlaylistName, enhancedPlaylist);
    setSavedToHistory(true);

    setTimeout(() => {
      setSavedToHistory(false);
    }, 3000);
  };

  const handleShare = () => {
    if (navigator.share) {
      navigator
        .share({
          title: customPlaylistName,
          text: `Check out my playlist: ${customPlaylistName}`,
          url: window.location.href,
        })
        .catch((error) => console.error("Error sharing:", error));
    } else {
      navigator.clipboard
        .writeText(window.location.href)
        .then(() => alert("Link copied to clipboard!"))
        .catch(() => alert("Failed to copy link"));
    }
  };

  const openSpotifySearch = (song: EnhancedSong) => {
    const query = `${song.title} ${song.artist}`;
    window.open(
      `https://open.spotify.com/search/${encodeURIComponent(query)}`,
      "_blank"
    );
  };

  return (
    <div className="page">
      <header className="header">
        <button className="back-btn" onClick={() => navigate("/home")}>
          <ArrowLeft size={18} />
          back
        </button>

        <div className="header-actions">
          <button className="icon-btn" onClick={toggleTheme}>
            {theme === "light" ? <Moon size={18} /> : <Sun size={18} />}
          </button>

          <button
            className="icon-btn"
            onClick={handleSaveToHistory}
            style={{
              background: savedToHistory ? "var(--accent-primary)" : undefined,
              color: savedToHistory ? "white" : undefined,
            }}
          >
            <Save size={18} />
          </button>

          <button className="icon-btn" onClick={handleShare}>
            <Share2 size={18} />
          </button>
        </div>
      </header>

      <main className="main playlist-main">
        <div className="playlist-header">
          {/* Show small cover image indicator if available */}
          {coverImage && (
            <div className="playlist-cover-indicator">
              <img
                src={coverImage.dataUrl}
                alt="Playlist cover"
                className="cover-indicator-image"
              />
              <span className="cover-indicator-text">
                cover image ready for spotify
              </span>
            </div>
          )}

          <input
            type="text"
            value={customPlaylistName}
            onChange={(e) => setCustomPlaylistName(e.target.value)}
            className="playlist-name-input"
            placeholder="playlist name..."
          />
          <p className="playlist-info">
            {enhancedPlaylist.length} tracks
            {isEnhancing && " • loading album covers..."}
            {coverImage && " • cover image ready"}
          </p>
        </div>

        {enhancedPlaylist.length > 0 ? (
          <div className="playlist-tracks">
            {enhancedPlaylist.map((track: EnhancedSong, index: number) => (
              <div
                key={`${track.title}-${track.artist}-${index}`}
                className="track-item"
              >
                <span className="track-number">{index + 1}</span>

                <div className="track-cover">
                  {track.coverUrl ? (
                    <img
                      src={track.coverUrl}
                      alt={`${track.title} album cover`}
                      className="album-cover"
                      loading="lazy"
                    />
                  ) : (
                    <div className="album-cover-placeholder">
                      <svg
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                      >
                        <path d="M9 18V5l12-2v13"></path>
                        <circle cx="6" cy="18" r="3"></circle>
                        <circle cx="18" cy="16" r="3"></circle>
                      </svg>
                    </div>
                  )}
                </div>

                <div className="track-info">
                  <div className="track-title">{track.title}</div>
                  <div className="track-artist">{track.artist}</div>
                </div>

                <button
                  className="track-action"
                  onClick={() => openSpotifySearch(track)}
                >
                  <ExternalLink size={16} />
                </button>
              </div>
            ))}
          </div>
        ) : (
          <div
            style={{
              textAlign: "center",
              padding: "40px 0",
              color: "var(--text-secondary)",
            }}
          >
            <p>No tracks found. Try generating a new playlist.</p>
          </div>
        )}

        <div className="export-section">
          {isGuestMode ? (
            <UniversalExport
              playlist={enhancedPlaylist}
              playlistName={customPlaylistName}
            />
          ) : (
            <>
              {!exportedPlaylistURL ? (
                <>
                  {isExporting ? (
                    <div style={{ marginBottom: "20px" }}>
                      <div className="progress-bar">
                        <div
                          className="progress-fill"
                          style={{ width: `${exportProgress}%` }}
                        />
                      </div>
                      <p
                        style={{
                          fontSize: "12px",
                          color: "var(--text-secondary)",
                          marginTop: "8px",
                        }}
                      >
                        {exportProgress < 100
                          ? `searching for tracks... ${exportProgress}%`
                          : coverImage
                          ? "uploading cover image..."
                          : "finalizing playlist..."}
                      </p>
                    </div>
                  ) : (
                    <button
                      className="export-btn"
                      onClick={handleExportToSpotify}
                      disabled={enhancedPlaylist.length === 0}
                    >
                      export to spotify
                      {coverImage && " with cover"}
                    </button>
                  )}
                </>
              ) : (
                <div style={{ textAlign: "center" }}>
                  <p
                    style={{
                      color: "var(--accent-primary)",
                      marginBottom: "16px",
                      fontSize: "14px",
                    }}
                  >
                    ✓ successfully exported to spotify!
                    {coverImage && " cover image included."}
                  </p>
                  <a
                    href={exportedPlaylistURL}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="export-btn"
                    style={{ textDecoration: "none", display: "inline-block" }}
                  >
                    open in spotify
                  </a>
                </div>
              )}
            </>
          )}
        </div>
      </main>
    </div>
  );
};

export default PlaylistPage;
